function scrypt_asm ( stdlib, foreign, buffer ) {
    "use asm";

    // Salsa20/8 state
    var S0 = 0, S1 = 0, S2 = 0, S3 = 0, S4 = 0, S5 = 0, S6 = 0, S7 = 0, S8 = 0, S9 = 0, S10 = 0, S11 = 0, S12 = 0, S13 = 0, S14 = 0, S15 = 0;

    // Scrypt params
    var R = 0, N = 0;

    // I/O buffer
    var HEAP32 = new stdlib.Uint32Array(buffer);

    function _salsa20_8 ( s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ) {
        s0 = s0|0;
        s1 = s1|0;
        s2 = s2|0;
        s3 = s3|0;
        s4 = s4|0;
        s5 = s5|0;
        s6 = s6|0;
        s7 = s7|0;
        s8 = s8|0;
        s9 = s9|0;
        s10 = s10|0;
        s11 = s11|0;
        s12 = s12|0;
        s13 = s13|0;
        s14 = s14|0;
        s15 = s15|0;

        var t = 0;

        S0 = s0;
        S1 = s1;
        S2 = s2;
        S3 = s3;
        S4 = s4;
        S5 = s5;
        S6 = s6;
        S7 = s7;
        S8 = s8;
        S9 = s9;
        S10 = s10;
        S11 = s11;
        S12 = s12;
        S13 = s13;
        S14 = s14;
        S15 = s15;

        // 1
        t = (S0+S12)|0; S4 = S4 ^ (t << 7) ^ (t >>> 25);  t = (S4+S0)|0; S8 = S8 ^ (t << 9) ^ (t >>> 23);
        t = (S8+S4)|0; S12 = S12 ^ (t << 13) ^ (t >>> 19);  t = (S12+S8)|0; S0 = S0 ^ (t << 18) ^ (t >>> 14);
        t = (S5+S1)|0; S9 = S9 ^ (t << 7) ^ (t >>> 25);  t = (S9+S5)|0; S13 = S13 ^ (t << 9) ^ (t >>> 23);
        t = (S13+S9)|0; S1 = S1 ^ (t << 13) ^ (t >>> 19);  t = (S1+S13)|0; S5 = S5 ^ (t << 18) ^ (t >>> 14);
        t = (S10+S6)|0; S14 = S14 ^ (t << 7) ^ (t >>> 25);  t = (S14+S10)|0; S2 = S2 ^ (t << 9) ^ (t >>> 23);
        t = (S2+S14)|0; S6 = S6 ^ (t << 13) ^ (t >>> 19);  t = (S6+S2)|0; S10 = S10 ^ (t << 18) ^ (t >>> 14);
        t = (S15+S11)|0; S3 = S3 ^ (t << 7) ^ (t >>> 25);  t = (S3+S15)|0; S7 = S7 ^ (t << 9) ^ (t >>> 23);
        t = (S7+S3)|0; S11 = S11 ^ (t << 13) ^ (t >>> 19);  t = (S11+S7)|0; S15 = S15 ^ (t << 18) ^ (t >>> 14);
        t = (S0+S3)|0; S1 = S1 ^ (t << 7) ^ (t >>> 25);  t = (S1+S0)|0; S2 = S2 ^ (t << 9) ^ (t >>> 23);
        t = (S2+S1)|0; S3 = S3 ^ (t << 13) ^ (t >>> 19);  t = (S3+S2)|0; S0 = S0 ^ (t << 18) ^ (t >>> 14);
        t = (S5+S4)|0; S6 = S6 ^ (t << 7) ^ (t >>> 25);  t = (S6+S5)|0; S7 = S7 ^ (t << 9) ^ (t >>> 23);
        t = (S7+S6)|0; S4 = S4 ^ (t << 13) ^ (t >>> 19);  t = (S4+S7)|0; S5 = S5 ^ (t << 18) ^ (t >>> 14);
        t = (S10+S9)|0; S11 = S11 ^ (t << 7) ^ (t >>> 25);  t = (S11+S10)|0; S8 = S8 ^ (t << 9) ^ (t >>> 23);
        t = (S8+S11)|0; S9 = S9 ^ (t << 13) ^ (t >>> 19);  t = (S9+S8)|0; S10 = S10 ^ (t << 18) ^ (t >>> 14);
        t = (S15+S14)|0; S12 = S12 ^ (t << 7) ^ (t >>> 25);  t = (S12+S15)|0; S13 = S13 ^ (t << 9) ^ (t >>> 23);
        t = (S13+S12)|0; S14 = S14 ^ (t << 13) ^ (t >>> 19);  t = (S14+S13)|0; S15 = S15 ^ (t << 18) ^ (t >>> 14);

        // 2
        t = (S0+S12)|0; S4 = S4 ^ (t << 7) ^ (t >>> 25);  t = (S4+S0)|0; S8 = S8 ^ (t << 9) ^ (t >>> 23);
        t = (S8+S4)|0; S12 = S12 ^ (t << 13) ^ (t >>> 19);  t = (S12+S8)|0; S0 = S0 ^ (t << 18) ^ (t >>> 14);
        t = (S5+S1)|0; S9 = S9 ^ (t << 7) ^ (t >>> 25);  t = (S9+S5)|0; S13 = S13 ^ (t << 9) ^ (t >>> 23);
        t = (S13+S9)|0; S1 = S1 ^ (t << 13) ^ (t >>> 19);  t = (S1+S13)|0; S5 = S5 ^ (t << 18) ^ (t >>> 14);
        t = (S10+S6)|0; S14 = S14 ^ (t << 7) ^ (t >>> 25);  t = (S14+S10)|0; S2 = S2 ^ (t << 9) ^ (t >>> 23);
        t = (S2+S14)|0; S6 = S6 ^ (t << 13) ^ (t >>> 19);  t = (S6+S2)|0; S10 = S10 ^ (t << 18) ^ (t >>> 14);
        t = (S15+S11)|0; S3 = S3 ^ (t << 7) ^ (t >>> 25);  t = (S3+S15)|0; S7 = S7 ^ (t << 9) ^ (t >>> 23);
        t = (S7+S3)|0; S11 = S11 ^ (t << 13) ^ (t >>> 19);  t = (S11+S7)|0; S15 = S15 ^ (t << 18) ^ (t >>> 14);
        t = (S0+S3)|0; S1 = S1 ^ (t << 7) ^ (t >>> 25);  t = (S1+S0)|0; S2 = S2 ^ (t << 9) ^ (t >>> 23);
        t = (S2+S1)|0; S3 = S3 ^ (t << 13) ^ (t >>> 19);  t = (S3+S2)|0; S0 = S0 ^ (t << 18) ^ (t >>> 14);
        t = (S5+S4)|0; S6 = S6 ^ (t << 7) ^ (t >>> 25);  t = (S6+S5)|0; S7 = S7 ^ (t << 9) ^ (t >>> 23);
        t = (S7+S6)|0; S4 = S4 ^ (t << 13) ^ (t >>> 19);  t = (S4+S7)|0; S5 = S5 ^ (t << 18) ^ (t >>> 14);
        t = (S10+S9)|0; S11 = S11 ^ (t << 7) ^ (t >>> 25);  t = (S11+S10)|0; S8 = S8 ^ (t << 9) ^ (t >>> 23);
        t = (S8+S11)|0; S9 = S9 ^ (t << 13) ^ (t >>> 19);  t = (S9+S8)|0; S10 = S10 ^ (t << 18) ^ (t >>> 14);
        t = (S15+S14)|0; S12 = S12 ^ (t << 7) ^ (t >>> 25);  t = (S12+S15)|0; S13 = S13 ^ (t << 9) ^ (t >>> 23);
        t = (S13+S12)|0; S14 = S14 ^ (t << 13) ^ (t >>> 19);  t = (S14+S13)|0; S15 = S15 ^ (t << 18) ^ (t >>> 14);

        // 3
        t = (S0+S12)|0; S4 = S4 ^ (t << 7) ^ (t >>> 25);  t = (S4+S0)|0; S8 = S8 ^ (t << 9) ^ (t >>> 23);
        t = (S8+S4)|0; S12 = S12 ^ (t << 13) ^ (t >>> 19);  t = (S12+S8)|0; S0 = S0 ^ (t << 18) ^ (t >>> 14);
        t = (S5+S1)|0; S9 = S9 ^ (t << 7) ^ (t >>> 25);  t = (S9+S5)|0; S13 = S13 ^ (t << 9) ^ (t >>> 23);
        t = (S13+S9)|0; S1 = S1 ^ (t << 13) ^ (t >>> 19);  t = (S1+S13)|0; S5 = S5 ^ (t << 18) ^ (t >>> 14);
        t = (S10+S6)|0; S14 = S14 ^ (t << 7) ^ (t >>> 25);  t = (S14+S10)|0; S2 = S2 ^ (t << 9) ^ (t >>> 23);
        t = (S2+S14)|0; S6 = S6 ^ (t << 13) ^ (t >>> 19);  t = (S6+S2)|0; S10 = S10 ^ (t << 18) ^ (t >>> 14);
        t = (S15+S11)|0; S3 = S3 ^ (t << 7) ^ (t >>> 25);  t = (S3+S15)|0; S7 = S7 ^ (t << 9) ^ (t >>> 23);
        t = (S7+S3)|0; S11 = S11 ^ (t << 13) ^ (t >>> 19);  t = (S11+S7)|0; S15 = S15 ^ (t << 18) ^ (t >>> 14);
        t = (S0+S3)|0; S1 = S1 ^ (t << 7) ^ (t >>> 25);  t = (S1+S0)|0; S2 = S2 ^ (t << 9) ^ (t >>> 23);
        t = (S2+S1)|0; S3 = S3 ^ (t << 13) ^ (t >>> 19);  t = (S3+S2)|0; S0 = S0 ^ (t << 18) ^ (t >>> 14);
        t = (S5+S4)|0; S6 = S6 ^ (t << 7) ^ (t >>> 25);  t = (S6+S5)|0; S7 = S7 ^ (t << 9) ^ (t >>> 23);
        t = (S7+S6)|0; S4 = S4 ^ (t << 13) ^ (t >>> 19);  t = (S4+S7)|0; S5 = S5 ^ (t << 18) ^ (t >>> 14);
        t = (S10+S9)|0; S11 = S11 ^ (t << 7) ^ (t >>> 25);  t = (S11+S10)|0; S8 = S8 ^ (t << 9) ^ (t >>> 23);
        t = (S8+S11)|0; S9 = S9 ^ (t << 13) ^ (t >>> 19);  t = (S9+S8)|0; S10 = S10 ^ (t << 18) ^ (t >>> 14);
        t = (S15+S14)|0; S12 = S12 ^ (t << 7) ^ (t >>> 25);  t = (S12+S15)|0; S13 = S13 ^ (t << 9) ^ (t >>> 23);
        t = (S13+S12)|0; S14 = S14 ^ (t << 13) ^ (t >>> 19);  t = (S14+S13)|0; S15 = S15 ^ (t << 18) ^ (t >>> 14);

        // 4
        t = (S0+S12)|0; S4 = S4 ^ (t << 7) ^ (t >>> 25);  t = (S4+S0)|0; S8 = S8 ^ (t << 9) ^ (t >>> 23);
        t = (S8+S4)|0; S12 = S12 ^ (t << 13) ^ (t >>> 19);  t = (S12+S8)|0; S0 = S0 ^ (t << 18) ^ (t >>> 14);
        t = (S5+S1)|0; S9 = S9 ^ (t << 7) ^ (t >>> 25);  t = (S9+S5)|0; S13 = S13 ^ (t << 9) ^ (t >>> 23);
        t = (S13+S9)|0; S1 = S1 ^ (t << 13) ^ (t >>> 19);  t = (S1+S13)|0; S5 = S5 ^ (t << 18) ^ (t >>> 14);
        t = (S10+S6)|0; S14 = S14 ^ (t << 7) ^ (t >>> 25);  t = (S14+S10)|0; S2 = S2 ^ (t << 9) ^ (t >>> 23);
        t = (S2+S14)|0; S6 = S6 ^ (t << 13) ^ (t >>> 19);  t = (S6+S2)|0; S10 = S10 ^ (t << 18) ^ (t >>> 14);
        t = (S15+S11)|0; S3 = S3 ^ (t << 7) ^ (t >>> 25);  t = (S3+S15)|0; S7 = S7 ^ (t << 9) ^ (t >>> 23);
        t = (S7+S3)|0; S11 = S11 ^ (t << 13) ^ (t >>> 19);  t = (S11+S7)|0; S15 = S15 ^ (t << 18) ^ (t >>> 14);
        t = (S0+S3)|0; S1 = S1 ^ (t << 7) ^ (t >>> 25);  t = (S1+S0)|0; S2 = S2 ^ (t << 9) ^ (t >>> 23);
        t = (S2+S1)|0; S3 = S3 ^ (t << 13) ^ (t >>> 19);  t = (S3+S2)|0; S0 = S0 ^ (t << 18) ^ (t >>> 14);
        t = (S5+S4)|0; S6 = S6 ^ (t << 7) ^ (t >>> 25);  t = (S6+S5)|0; S7 = S7 ^ (t << 9) ^ (t >>> 23);
        t = (S7+S6)|0; S4 = S4 ^ (t << 13) ^ (t >>> 19);  t = (S4+S7)|0; S5 = S5 ^ (t << 18) ^ (t >>> 14);
        t = (S10+S9)|0; S11 = S11 ^ (t << 7) ^ (t >>> 25);  t = (S11+S10)|0; S8 = S8 ^ (t << 9) ^ (t >>> 23);
        t = (S8+S11)|0; S9 = S9 ^ (t << 13) ^ (t >>> 19);  t = (S9+S8)|0; S10 = S10 ^ (t << 18) ^ (t >>> 14);
        t = (S15+S14)|0; S12 = S12 ^ (t << 7) ^ (t >>> 25);  t = (S12+S15)|0; S13 = S13 ^ (t << 9) ^ (t >>> 23);
        t = (S13+S12)|0; S14 = S14 ^ (t << 13) ^ (t >>> 19);  t = (S14+S13)|0; S15 = S15 ^ (t << 18) ^ (t >>> 14);

        S0 = (S0+s0)|0;
        S1 = (S1+s1)|0;
        S2 = (S2+s2)|0;
        S3 = (S3+s3)|0;
        S4 = (S4+s4)|0;
        S5 = (S5+s5)|0;
        S6 = (S6+s6)|0;
        S7 = (S7+s7)|0;
        S8 = (S8+s8)|0;
        S9 = (S9+s9)|0;
        S10 = (S10+s10)|0;
        S11 = (S11+s11)|0;
        S12 = (S12+s12)|0;
        S13 = (S13+s13)|0;
        S14 = (S14+s14)|0;
        S15 = (S15+s15)|0;
    }

    function _salsa20_8_test ( s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ) {
        s0 = s0|0;
        s1 = s1|0;
        s2 = s2|0;
        s3 = s3|0;
        s4 = s4|0;
        s5 = s5|0;
        s6 = s6|0;
        s7 = s7|0;
        s8 = s8|0;
        s9 = s9|0;
        s10 = s10|0;
        s11 = s11|0;
        s12 = s12|0;
        s13 = s13|0;
        s14 = s14|0;
        s15 = s15|0;

        return ( (S0 ^ s0) | (S1 ^ s1) | (S2 ^ s2) | (S3 ^ s3)
               | (S4 ^ s4) | (S5 ^ s5) | (S6 ^ s6) | (S7 ^ s7)
               | (S8 ^ s8) | (S9 ^ s9) | (S10 ^ s10) | (S11 ^ s11)
               | (S12 ^ s12) | (S13 ^ s13) | (S14 ^ s14) | (S15 ^ s15)
               ? 0 : 1 )|0;
    }

    function _block_copy ( src, dst ) {
        src = src|0;
        dst = dst|0;

        var i = 0, k = 0;

        k = R << 7; // 2 * 64 * r
        for ( i = 0; (i|0) < (k|0); i = (i+4)|0 ) {
            HEAP32[(dst+i)>>2] = HEAP32[(src+i)>>2];
        }
    }

    function _block_xor ( src1, src2, dst ) {
        src1 = src1|0;
        src2 = src2|0;
        dst = dst|0;

        var i = 0, k = 0;

        k = R << 7; // 2 * 64 * r
        for ( i = 0; (i|0) < (k|0); i = (i+4)|0 ) {
            HEAP32[(dst+i)>>2] = HEAP32[(src1+i)>>2] ^ HEAP32[(src2+i)>>2];
        }
    }

    function _block_mix ( src, dst ) {
        src = src|0;
        dst = dst|0;

        var i = 0, j = 0, k = 0, hk = 0;

        k = R << 7; // 2 * 64 * r
        hk = R << 6;

        // X = B[ 2*r - 1 ]
        S0 = HEAP32[(src+k-64)>>2]|0;
        S1 = HEAP32[(src+k-60)>>2]|0;
        S2 = HEAP32[(src+k-56)>>2]|0;
        S3 = HEAP32[(src+k-52)>>2]|0;
        S4 = HEAP32[(src+k-48)>>2]|0;
        S5 = HEAP32[(src+k-44)>>2]|0;
        S6 = HEAP32[(src+k-40)>>2]|0;
        S7 = HEAP32[(src+k-36)>>2]|0;
        S8 = HEAP32[(src+k-32)>>2]|0;
        S9 = HEAP32[(src+k-28)>>2]|0;
        S10 = HEAP32[(src+k-24)>>2]|0;
        S11 = HEAP32[(src+k-20)>>2]|0;
        S12 = HEAP32[(src+k-16)>>2]|0;
        S13 = HEAP32[(src+k-12)>>2]|0;
        S14 = HEAP32[(src+k-8)>>2]|0;
        S15 = HEAP32[(src+k-4)>>2]|0;

        for ( i = 0; (i|0) < (k|0); i = (i+64)|0 ) {
            // X = X ^ B [i]
            S0 = S0 ^ HEAP32[(src+i)>>2]|0;
            S1 = S1 ^ HEAP32[(src+i+4)>>2]|0;
            S2 = S2 ^ HEAP32[(src+i+8)>>2]|0;
            S3 = S3 ^ HEAP32[(src+i+12)>>2]|0;
            S4 = S4 ^ HEAP32[(src+i+16)>>2]|0;
            S5 = S5 ^ HEAP32[(src+i+20)>>2]|0;
            S6 = S6 ^ HEAP32[(src+i+24)>>2]|0;
            S7 = S7 ^ HEAP32[(src+i+28)>>2]|0;
            S8 = S8 ^ HEAP32[(src+i+32)>>2]|0;
            S9 = S9 ^ HEAP32[(src+i+36)>>2]|0;
            S10 = S10 ^ HEAP32[(src+i+40)>>2]|0;
            S11 = S11 ^ HEAP32[(src+i+44)>>2]|0;
            S12 = S12 ^ HEAP32[(src+i+48)>>2]|0;
            S13 = S13 ^ HEAP32[(src+i+52)>>2]|0;
            S14 = S14 ^ HEAP32[(src+i+56)>>2]|0;
            S15 = S15 ^ HEAP32[(src+i+60)>>2]|0;

            // X = Salsa(X)
            _salsa20_8( S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15 );

            // B'[j] = X
            j = ( (i>>>7<<6) + ( i & 64 ? hk : 0 ) )|0;
            HEAP32[(dst+j)>>2] = S0;
            HEAP32[(dst+j+4)>>2] = S1;
            HEAP32[(dst+j+8)>>2] = S2;
            HEAP32[(dst+j+12)>>2] = S3;
            HEAP32[(dst+j+16)>>2] = S4;
            HEAP32[(dst+j+20)>>2] = S5;
            HEAP32[(dst+j+24)>>2] = S6;
            HEAP32[(dst+j+28)>>2] = S7;
            HEAP32[(dst+j+32)>>2] = S8;
            HEAP32[(dst+j+36)>>2] = S9;
            HEAP32[(dst+j+40)>>2] = S10;
            HEAP32[(dst+j+44)>>2] = S11;
            HEAP32[(dst+j+48)>>2] = S12;
            HEAP32[(dst+j+52)>>2] = S13;
            HEAP32[(dst+j+56)>>2] = S14;
            HEAP32[(dst+j+60)>>2] = S15;
        }
    }

    function _block_mix_test ( src1, src2 ) {
        src1 = src1|0;
        src2 = src2|0;

        var i = 0, k = 0, z = 0;

        k = R << 7;
        for ( i = 0; (i|0) < (k|0); i = (i+4)|0 ) {
            z = z | ( HEAP32[(src1+i)>>2] ^ HEAP32[(src2+i)>>2] )|0;
        }

        return ( z ? 0 : 1 )|0;
    }

    /**
     * Consumes: 128*R octets @ src
     * Requires: 128*R*(N+2) octets @ dst
     * Produces: 128*R octets @ dst
     */
    function _ro_mix ( src, dst ) {
        src = src|0;
        dst = dst|0;

        var i = 0, j = 0, k = 0, m = 0, mm = 0, v = 0, t = 0;

        k = R << 7; // 2 * 64 * r
        m = R << (7+N)|0;
        mm = ((1<<N)-1)|0;

        v = ( dst + (k<<1) )|0;
        _block_copy( src, v );
        for ( i = k; (i|0) < (m|0); i = (i+k)|0 ) {
            j = (v+i)|0;
            _block_mix( (j-k)|0, j );
        }
        _block_mix( j, dst );

        t = (dst + k)|0;
        for ( i = 0; (i|0) < (m|0); i = (i+k)|0 ) {
            j = ( HEAP32[(dst+(((R<<1)-1)<<6))>>2] & mm )<<7;
            _block_xor( dst, (v+j)|0, t );
            _block_mix( t, dst );
        }
    }

    function _ro_mix_test ( src1, src2 ) {
        src1 = src1|0;
        src2 = src2|0;

        var i = 0, k = 0, m = 0, z = 0;

        k = R << 7;
        for ( i = 0; (i|0) < (k|0); i = (i+4)|0 ) {
            z = z | ( HEAP32[(src1+i)>>2] ^ HEAP32[(src2+i)>>2] ) |0;
        }

        return ( z ? 0 : 1 )|0;
    }

    function init ( r, n ) {
        r = r|0;
        n = n|0;

        R = r;
        N = n;
    }

    return {
        _salsa20_8: _salsa20_8,
        _salsa20_8_test: _salsa20_8_test,
        _block_mix: _block_mix,
        _block_mix_test: _block_mix_test,
        _ro_mix: _ro_mix,
        _ro_mix_test: _ro_mix_test,
        init: init
    };
}

// export
exports._scrypt_asm = scrypt_asm;
